#!/usr/bin/env python

# zipSeries 1.2.6
# Copyright (C) 2015 System & Method A/S Denmark
# Released under the MIT license
#
# Written by Andreas Louv <and@sitemule.com>

VERSION = '1.2.6'

import sys
import subprocess
import getpass
import uuid

class color:
	PURPLE = '\033[95m'
	CYAN = '\033[96m'
	DARKCYAN = '\033[36m'
	BLUE = '\033[94m'
	GREEN = '\033[92m'
	YELLOW = '\033[93m'
	RED = '\033[91m'
	BOLD = '\033[1m'
	UNDERLINE = '\033[4m'
	END = '\033[0m'

def writeVersion():
	print 'zipSeries ' + VERSION
	print ''
	print 'Copyright (C) 2015 System & Method A/S Denmark'
	print 'Released under the MIT license'
	print ''
	print 'Written by Andreas Louv <and@sitemule.com>'

def writeHelp():

	print 'usage: zipSeries [--version] [--help] [OPTION]...'
	print ''
	print 'Copy libraries / objects from one iSeries (AS/400) to another running'
	print '  the same (or lower) release of OS/400 as source.'
	print ''
	print 'Mandatory arguments to long options are mandatory for short options too.'

	# Source Help
	print '  -s, --source-srv=[server]       set server for the source'
	print '  -u, --source-usr=[user]         set user profile for the source'
	print '  -p, --source-pwd=[password]     set user password for the source'
	print '  -l, --source-libl=[library]     set library for the source'
	print '  -o, --source-obj=[object]       set oject for the source'
	print '                                  leave blank if whole library is saved'
	print '  -c, --source-config=[config]    use file to set source config'
	print '      --source-save-file=[file]   save OS/400 savfile locally'
	print '                                    all other --source-* options will ignored '
	print '                                    if this option is set'
	print ''
	# Target Help
	print '  -S, --target-srv=[server]       set server for the target'
	print '  -U, --target-usr=[user]         set user profile for the target'
	print '  -P, --target-pwd=[password]     set user password for the target'
	print '  -L, --target-libl=[library]     set library for the target'
	print '  -C, --target-config=[config]    use file to set target config'
	print '      --target-save-file=[file]   restore from OS/400 savfile stored locally'
	print '                                    all other --target-* options will ignored '
	print '                                    if this option is set'
	print ''
	# Othet Help
	print '      --help                      display this help and exit'
	print '  -v, --verbose                   be more verbose/talkative during the operation.'
	print '      --version                   output version information and exit'

# readConfigFile will call itself again with the sudo=True argument,
#   this is so we will only run as sudo if necessary.
def readConfigFile(config, l_config, file, sudo=False):
	cmd = ['cat', file]

	if sudo:
		cmd.insert(0, 'sudo')

	try:
		f_config = subprocess.check_output(cmd, stderr=subprocess.STDOUT).splitlines()

	except Exception, e:
		if not sudo:
			return readConfigFile(config, l_config, file, True)
		else:
			sys.stderr.write('zipSeries: cannot open \'' + color.BOLD + file + color.END + '\' for reading: No such file or directory\n')
			sys.exit(0)

	parseConfigFile(config, l_config, file, f_config)


def parseConfigFile(config, l_config, file, f_config):

	if config['verbose']:
		print 'zipSeries: Parsing config file: ' + file

	for i, line in enumerate(f_config):
		line = line.strip()
		# Allow empty lines and allow comments (line starting with '#')
		if line == '' or line[0] == '#':
			continue

		msg = line

		# If the config line cannot be parsed an error should be written
		if ' ' in line:
			split_index = line.index(' ')
			key = line[0:split_index]
			value = line[split_index+1:]

			if key in ['srv', 'usr', 'pwd', 'libl', 'obj']:
		
				if config['verbose']:
					print 'zipSeries: reading key: \'' + key + '\''

				l_config[key] = value
				# Continue the iteration to prevent the error fallthough
				continue
			else:
				msg = 'Key not recornized: \'' + color.BOLD + key + color.END + '\''

		# Fallthough to error print
		sys.stderr.write('zipSeries: Cannot parse \'' + color.BOLD + file + color.END + '\':\n')
		sys.stderr.write('Line (' + str(i+1) + '): ' + msg + '\n')
		sys.exit(1)

def processArgv(argv):
	config = {
		# when verbose is True zipSeries will print information about the programs workfow
		'verbose': False,
		'source': {
			'srv': '',
			'usr': '',
			'pwd': '', # (optional - will prompt when needed)
			'libl': '',
			'obj': '', # (optional)
			'save-file': ''
		},
		'target': {
			'srv': '',
			'usr': '',
			'pwd': '', # (optional - will prompt when needed)
			'libl': '',
			'save-file': ''
		}
	}

	gate = None

	# We need to iterate the argv's twice to support a more polomorphish interface
	#   for instance if the --help option is set, we should only show help,
	#   and not try to parse the other args, same goes for --version.
	# It sould be posible to specify --verbose anywere:
	for i, arg in enumerate(argv):
		if arg == '--help':
			writeHelp()
			sys.exit(0)
			argv.pop(i)
		elif arg == '--version':
			writeVersion()
			sys.exit(0)
			argv.pop(i)
		elif arg == '--verbose' or arg == '-v':
			config['verbose'] = True
			argv.pop(i)

	# In second iteration everything should now be in such a way that we dont care about the order of arguments
	while len(argv):
		arg = argv.pop(0)
		if arg[0] == '-':
			gate = arg

		if gate == None:
			sys.stderr.write('Try \'' + color.BOLD + 'zipSeries --help' + color.END + '\' for more information.\n')
			sys.exit(1)
		else:
			no_gate = False
			if gate[:2] == '--':
				if '=' in gate:
					arg = gate[gate.index('=')+1:]
					gate = gate[:gate.index('=')]
				else:
					sys.stderr.write('zipSeries missing value for option -- \'' + color.BOLD + gate + color.END + '\'\n')
					sys.exit(1)
			else:
				no_gate = (len(argv) == 0)
				arg = argv.pop(0)

			if not no_gate:
				# Source Config
				if gate == '--source-srv' or gate == '-s':
					config['source']['srv'] = arg
				elif gate == '--source-usr' or gate == '-u':
					config['source']['usr'] = arg
				elif gate == '--source-pwd' or gate == '-p':
					config['source']['pwd'] = arg
				elif gate == '--source-libl' or gate == '-l':
					config['source']['libl'] = arg
				elif gate == '--source-obj' or gate == '-o':
					config['source']['obj'] = arg
				elif gate == '--source-config' or gate == '-c':
					readConfigFile(config, config['source'], '/etc/zipSeries/' + arg + '.conf')
				elif gate == '--source-save-file':
					config['source']['save-file'] = arg
				# Target Config
				elif gate == '--target-srv' or gate == '-S':
					config['target']['srv'] = arg
				elif gate == '--target-usr' or gate == '-U':
					config['target']['usr'] = arg
				elif gate == '--target-pwd' or gate == '-P':
					config['target']['pwd'] = arg
				elif gate == '--target-libl' or gate == '-L':
					config['target']['libl'] = arg
				elif gate == '--target-config' or gate == '-C':
					readConfigFile(config, config['target'], '/etc/zipSeries/' + arg + '.conf')
				elif gate == '--target-save-file':
					config['target']['save-file'] = arg
				else:
					no_gate = True
			# if the option is not supported an error should be written
			if no_gate:
				sys.stderr.write('zipSeries: invalid option -- \'' + color.BOLD + (gate[2:] if gate[:2] == '--' else gate[1:]) + color.END + '\'\n')
				sys.stderr.write('Try \'' + color.BOLD + 'zipSeries --help' + color.END + '\' for more information.\n')
				sys.exit(1)

			gate = None

	checkConfig(config)
	
	return config

# checkConfig makes sure that all config options are specified.
#  only the passwords can be left blank, they will be prompted later on
def checkConfig(config):
	# Source Config
	# Ignore all other --source-* options if --source-save-file is specified
	if config['source']['save-file'] != '':
		if config['verbose']:
			print 'zipSeries: using --source-save-file, all other --source-* options are ignored'
	else:
		if config['source']['srv'] == '':
			sys.stderr.write('zipSeries: Missing option: \'' + color.BOLD + '-s, --source-srv=server' + color.END + '\'\n')
			sys.exit(1)
		if config['source']['libl'] == '':
			sys.stderr.write('zipSeries: Missing option: \'' + color.BOLD + '-l, --source-libl=library' + color.END + '\'\n')
			sys.exit(1)
		if config['source']['usr'] == '':
			sys.stderr.write('zipSeries: Missing option: \'' + color.BOLD + '-u, --source-usr=user' + color.END + '\'\n')
			sys.exit(1)

	# Ignore all other --source-* options if --source-save-file is specified
	if config['target']['save-file'] != '':
		if config['verbose']:
			print 'zipSeries: using --target-save-file, all other --target-* options are ignored'
	else:
		if config['target']['srv'] == '':
			sys.stderr.write('zipSeries: Missing option: \'' + color.BOLD + '-S, --target-srv=server' + color.END + '\'\n')
			sys.exit(1)
		if config['target']['libl'] == '':
			sys.stderr.write('zipSeries: Missing option: \'' + color.BOLD + '-L, --target-libl=library' + color.END + '\'\n')
			sys.exit(1)
		if config['target']['usr'] == '':
			sys.stderr.write('zipSeries: Missing option: \'' + color.BOLD + '-U, --target-usr=user' + color.END + '\'\n')
			sys.exit(1)

class AS400:
	def __init__(self, config):
		self.source = config['source']
		self.target = config['target']

	def save(self):
		# save_file is the file which the AS/400 library / object should be saved to
		save_file = ('/tmp/zipSeries-' + str(uuid.uuid1()) + '.zs4') if self.target['save-file'] == '' else self.target['save-file'];
		self.source['save-file'] = save_file
	
		# TODO Write FTP script

		print self.source

	def restore(self, file):
		# save_file is the saved file that should be restored on the AS/400
		save_file = self.source['save-file']
		
		# TODO Write FTP script
		
		print self.target

def main(argv):

	config = processArgv(argv)

	as400 = AS400(config)
	if config['source']['save-file'] == '':
		if config['source']['pwd'] == '':
			config['source']['pwd'] = getpass.getpass('Enter source user password: ')
		try:
			as400.save()
		except Exception, e:
			sys.stderr.write('zipSeries: Error happened while making savefile:\n');
			sys.stderr.write(str(e) + '\n')
			sys.exit(1)

	if config['target']['save-file'] == '':
		if config['target']['pwd'] == '':
			config['target']['pwd'] = getpass.getpass('Enter target user password: ')
		try:
			as400.restore(config['source']['save-file'])
		except Exception, e:
			sys.stderr.write('zipSeries: Error happened while restoring savefile:\n');
			sys.stderr.write(str(e) + '\n')
			sys.exit(1)

main(sys.argv[1:])
